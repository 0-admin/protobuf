{"name":"Google Protocol Buffers","tagline":"","body":"Protocol Buffers - Google's data interchange format\r\nCopyright 2008 Google Inc.\r\nhttps://developers.google.com/protocol-buffers/\r\n\r\nC++ Installation - Unix\r\n=======================\r\n\r\nIf you get the source from github, you need to generate the configure script\r\nfirst:\r\n\r\n  $ ./autogen.sh\r\n\r\nThis will download gtest source (which is used for C++ Protocol Buffer\r\nunit-tests) to the current directory and run automake, autoconf, etc.\r\nto generate the configure script and various template makefiles.\r\n\r\nYou can skip this step if you are using a release package (which already\r\ncontains gtest and the configure script).\r\n\r\nTo build and install the C++ Protocol Buffer runtime and the Protocol\r\nBuffer compiler (protoc) execute the following:\r\n\r\n  $ ./configure\r\n  $ make\r\n  $ make check\r\n  $ make install\r\n\r\nIf \"make check\" fails, you can still install, but it is likely that\r\nsome features of this library will not work correctly on your system.\r\nProceed at your own risk.\r\n\r\n\"make install\" may require superuser privileges.\r\n\r\nFor advanced usage information on configure and make, see INSTALL.txt.\r\n\r\n** Hint on install location **\r\n\r\n  By default, the package will be installed to /usr/local.  However,\r\n  on many platforms, /usr/local/lib is not part of LD_LIBRARY_PATH.\r\n  You can add it, but it may be easier to just install to /usr\r\n  instead.  To do this, invoke configure as follows:\r\n\r\n    ./configure --prefix=/usr\r\n\r\n  If you already built the package with a different prefix, make sure\r\n  to run \"make clean\" before building again.\r\n\r\n** Compiling dependent packages **\r\n\r\n  To compile a package that uses Protocol Buffers, you need to pass\r\n  various flags to your compiler and linker.  As of version 2.2.0,\r\n  Protocol Buffers integrates with pkg-config to manage this.  If you\r\n  have pkg-config installed, then you can invoke it to get a list of\r\n  flags like so:\r\n\r\n    pkg-config --cflags protobuf         # print compiler flags\r\n    pkg-config --libs protobuf           # print linker flags\r\n    pkg-config --cflags --libs protobuf  # print both\r\n\r\n  For example:\r\n\r\n    c++ my_program.cc my_proto.pb.cc `pkg-config --cflags --libs protobuf`\r\n\r\n  Note that packages written prior to the 2.2.0 release of Protocol\r\n  Buffers may not yet integrate with pkg-config to get flags, and may\r\n  not pass the correct set of flags to correctly link against\r\n  libprotobuf.  If the package in question uses autoconf, you can\r\n  often fix the problem by invoking its configure script like:\r\n\r\n    configure CXXFLAGS=\"$(pkg-config --cflags protobuf)\" \\\r\n              LIBS=\"$(pkg-config --libs protobuf)\"\r\n\r\n  This will force it to use the correct flags.\r\n\r\n  If you are writing an autoconf-based package that uses Protocol\r\n  Buffers, you should probably use the PKG_CHECK_MODULES macro in your\r\n  configure script like:\r\n\r\n    PKG_CHECK_MODULES([protobuf], [protobuf])\r\n\r\n  See the pkg-config man page for more info.\r\n\r\n  If you only want protobuf-lite, substitute \"protobuf-lite\" in place\r\n  of \"protobuf\" in these examples.\r\n\r\n** Note for cross-compiling **\r\n\r\n  The makefiles normally invoke the protoc executable that they just\r\n  built in order to build tests.  When cross-compiling, the protoc\r\n  executable may not be executable on the host machine.  In this case,\r\n  you must build a copy of protoc for the host machine first, then use\r\n  the --with-protoc option to tell configure to use it instead.  For\r\n  example:\r\n\r\n    ./configure --with-protoc=protoc\r\n\r\n  This will use the installed protoc (found in your $PATH) instead of\r\n  trying to execute the one built during the build process.  You can\r\n  also use an executable that hasn't been installed.  For example, if\r\n  you built the protobuf package for your host machine in ../host,\r\n  you might do:\r\n\r\n    ./configure --with-protoc=../host/src/protoc\r\n\r\n  Either way, you must make sure that the protoc executable you use\r\n  has the same version as the protobuf source code you are trying to\r\n  use it with.\r\n\r\n** Note for Solaris users **\r\n\r\n  Solaris 10 x86 has a bug that will make linking fail, complaining\r\n  about libstdc++.la being invalid.  We have included a work-around\r\n  in this package.  To use the work-around, run configure as follows:\r\n\r\n    ./configure LDFLAGS=-L$PWD/src/solaris\r\n\r\n  See src/solaris/libstdc++.la for more info on this bug.\r\n\r\n** Note for HP C++ Tru64 users **\r\n\r\n  To compile invoke configure as follows:\r\n\r\n    ./configure CXXFLAGS=\"-O -std ansi -ieee -D__USE_STD_IOSTREAM\"\r\n\r\n  Also, you will need to use gmake instead of make.\r\n\r\nC++ Installation - Windows\r\n==========================\r\n\r\nIf you are using Microsoft Visual C++, see vsprojects/readme.txt.\r\n\r\nIf you are using Cygwin or MinGW, follow the Unix installation\r\ninstructions, above.\r\n\r\nBinary Compatibility Warning\r\n============================\r\n\r\nDue to the nature of C++, it is unlikely that any two versions of the\r\nProtocol Buffers C++ runtime libraries will have compatible ABIs.\r\nThat is, if you linked an executable against an older version of\r\nlibprotobuf, it is unlikely to work with a newer version without\r\nre-compiling.  This problem, when it occurs, will normally be detected\r\nimmediately on startup of your app.  Still, you may want to consider\r\nusing static linkage.  You can configure this package to install\r\nstatic libraries only using:\r\n\r\n  ./configure --disable-shared\r\n\r\nJava and Python Installation\r\n============================\r\n\r\nThe Java and Python runtime libraries for Protocol Buffers are located\r\nin the java and python directories.  See the README file in each\r\ndirectory for more information on how to compile and install them.\r\nNote that both of them require you to first install the Protocol\r\nBuffer compiler (protoc), which is part of the C++ package.\r\n\r\nUsage\r\n=====\r\n\r\nThe complete documentation for Protocol Buffers is available via the\r\nweb at:\r\n\r\n  https://developers.google.com/protocol-buffers/\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}